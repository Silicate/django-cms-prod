[djangocms_installer]
# In config file mode, the options can be provided via an external configuration file.
# It is possible to either provide all the values in the config file, or just some,
#   or overriding them by using the command line arguments.
#   http://djangocms-installer.readthedocs.org/en/develop/reference.html

# Activate Django I18N / L10N setting; choices: yes|no, default: yes
i18n = yes

# Activate Django timezone support; choices: yes|no, default: yes
use-tz = yes

#  Optional default time zone, default (optional): local timezone
timezone = 

# Install and configure reversion support, choices: yes|no, default: yes
reversion = yes

# Activate CMS permission management; choices: yes|no, default: yes
permissions = yes

# Languages available for the project. Option can be provided as a comma separated list. default (optional)
# supported language codes: https://github.com/django/django/blob/master/django/conf/global_settings.py#L50
languages = en, de

# Django version; choices: 1.4|1.5|1.6|1.7|stable, default: stable
# (currently stable keyword is expanded to Django version 1.7)
django-version = 1.7

# django CMS version, choices: 2.4|3.0|3.1|stable|develop. default: stable
# (currently stable keyword is expanded to django CMS version 3.1)
cms-version = 3.1

# project directory dir is the main project directory (the one where manage.py will be created) default (.)
parent-dir = /cms

# default (optional)
pip-options =

# Use Twitter Bootstrap as theme, choices: yes|no, default: no
bootstrap = yes

# Use a custom directory as template source; default: no (duplicate settings?)
templates = no

# Use a custom directory as template source; is checked to be a valid path, otherwise the shipped templates are used. 
# installer won’t update the CMS_TEMPLATES settings parameter, so you’ll need to modify that after installation. default (optional)
template =

# Load a starting page with examples (for english language only) after installation, choices: yes|no, default: no
starting-page = yes

# List plugins that’s going to be installed and configured for the project. this will not create the project
list-plugins = false

# Dumps the generated requirements to stdout and exits
dump-requirements = false

# run in Batch mode default: false
no-input = yes

# Install and configure django-filer plugins: default: false 
filer = yes

# use a custom requirements file instead of the requirements provided by djangocms installer. default: (optional)
# note: requirements.txt is needed here, even though these were installed already in Dockerfile (otherwise error)
requirements = 

# Don’t install package dependencies: default: false
no-deps = false

# Don’t install database package: default: false
no-db-driver = false

# Don’t run syncdb / migrate after bootstrapping the project: default: false
no-sync = false

# Don’t create the admin user: default: false
no-user = false

# Path to a file with extra variables to append to generated settings file. default (optional)
extra-settings = /config/append-settings.py

# Skip the check if the project dir contains files or directory: default: false
skip-empty-check = false

# Use UTC as default timezone: default: false
utc = yes

# Database configuration; use dj-database-url syntax: https://github.com/kennethreitz/dj-database-url
# default: db = sqlite://localhost/project.db
# postgres://USER:PASSWORD@HOST:PORT/NAME - HOST = name of postgres container
# --- docker-entrypoint will append the db url below ---
