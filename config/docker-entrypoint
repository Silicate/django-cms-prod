#!/bin/bash
set -e

# The script installs Django-CMS, only on first run of container
#   - the site will be installed in /cms/website1
#   - it will preserve data when recreating containers
#   - it enables installing into a mounted docker data-volume

# include dot-files (if present) when cp or rm
shopt -s dotglob

mkdir -pv /cms/
cd /cms/

# checking , if django-CMS was already installed
if [ ! -e /cms/manage.py ]; then
    echo "[info] django-CMS: installation started..."
    echo "ALLOWED_HOSTS = ${ALLOWED_HOSTS}" >> /config/append-settings.py
    echo "db = postgres://${DBHOST_ENV_POSTGRES_USER}:${DBHOST_ENV_POSTGRES_PASSWORD}@dbhost:5432/${DBHOST_ENV_POSTGRES_USER}" >> /config/cms-installer.ini
    djangocms --config-file /config/cms-installer.ini website1
    
    printf  "[info] waiting for postgres container.."
    connect="offline"
    until [ $connect == "online" ]
    do
        nc -v -z -w 1 dbhost 5432 &> /dev/null && connect="online" || connect="offline"
        printf "."
        sleep 1
    done
    echo -e "\n[info] able to connect to postgres container"

    # create an admin user as provided by env variables (checks first, if user exists)
    echo "from django.contrib.auth import get_user_model; User = get_user_model(); print '[warn] ${ADMIN_USER} exists' if User.objects.filter(username='${ADMIN_USER}').exists() else User.objects.create_superuser('${ADMIN_USER}', '${ADMIN_EMAIL}', '${ADMIN_PASSWD}')" | python manage.py shell
    echo -e "\n\n==========================================================================================="
    echo    "[info] django-CMS: installation complete!"
    echo -e "[info] User: ${ADMIN_USER} with Password: ${ADMIN_PASSWD} and Email: ${ADMIN_EMAIL}\n"
else
    python manage.py migrate
    echo -e "\n==========================================================================================="
    echo -e "[info] django-CMS: using an existing project\n"
fi

# collect static files during each start of container (static files will be served by nginx)
python manage.py collectstatic --noinput --verbosity=2 >> /var/log/collectstatic.log
echo -e "[info] Running in 'production' mode, login first at http://example.com:80/admin then /?edit"
echo -e "===========================================================================================\n"

# else default to run whatever the user wanted like "bash"
exec "$@"